name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libffi-dev libssl-dev

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        echo "Verifying critical dependencies..."
        python -c "import cryptography; print(f'cryptography version: {cryptography.__version__}')"
        python -c "import pytest; print(f'pytest version: {pytest.__version__}')"
        python -c "import pytest_cov; print(f'pytest-cov version: {pytest_cov.__version__}')"
        python -c "import black; print(f'black version: {black.__version__}')"
        python -c "import isort; print(f'isort version: {isort.__version__}')"
        python -c "import flake8; print(f'flake8 version: {flake8.__version__}')"

    - name: Debug test discovery
      run: |
        echo "Checking test discovery..."
        python -m pytest --collect-only tests/ || true
        echo "Checking imports..."
        python -c "from app.oauth2_service import OAuth2TokenManager; print('OAuth2TokenManager imported successfully')" || true
        python -c "from cryptography.fernet import Fernet; print('Fernet imported successfully')" || true
        echo "Checking OAuth2 test file specifically..."
        python -c "import tests.test_oauth2; print('OAuth2 test file imported successfully')" || true
        echo "Checking all test files..."
        ls -la tests/
        echo "Checking Python version and packages..."
        python --version
        pip list | grep -E "(cryptography|pytest|fastapi)" || true

    - name: Install pre-commit
      run: |
        pip install pre-commit

    - name: Run pre-commit hooks (check only)
      run: |
        pre-commit run --all-files || true

    - name: Fix formatting issues
      run: |
        black app/ tests/
        isort app/ tests/ --profile black
        echo "Formatting issues fixed automatically"

    - name: Run pre-commit hooks (final check)
      run: |
        pre-commit run --all-files

    - name: Run type checking
      run: |
        mypy app/ --config-file mypy.ini

    - name: Run security tests
      run: |
        python -m pytest tests/test_security.py -v --tb=short

    - name: Run all tests
      run: |
        python -m pytest tests/ -v --tb=short --cov=app --cov-report=xml --cov-fail-under=55

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install bandit pip-audit

    - name: Run security scans with pre-commit
      run: |
        pre-commit run bandit --all-files
        pre-commit run detect-secrets --all-files

    - name: Run Bandit security scan (detailed)
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ -ll

    - name: Run pip-audit vulnerability scan
      run: |
        pip-audit -r requirements.txt --format=json --output=pip-audit-report.json || true
        pip-audit -r requirements.txt || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          pip-audit-report.json

  docker:
    runs-on: ubuntu-latest
    needs: [test]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: secure-python-web-api:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deployment would happen here"
        echo "This could include:"
        echo "- Updating Kubernetes manifests"
        echo "- Rolling out to production cluster"
        echo "- Running health checks"
        echo "- Sending notifications"
