{"dependencies": [{"name": "fastapi", "version": "0.104.1", "vulns": [{"id": "PYSEC-2024-38", "fix_versions": ["0.109.1"], "aliases": ["GHSA-qf9m-vfgh-m389", "CVE-2024-24762"], "description": "FastAPI is a web framework for building APIs with Python 3.8+ based on standard Python type hints. When using form data, `python-multipart` uses a Regular Expression to parse the HTTP `Content-Type` header, including options. An attacker could send a custom-made `Content-Type` option that is very difficult for the RegEx to process, consuming CPU resources and stalling indefinitely (minutes or more) while holding the main event loop. This means that process can't handle any more requests. It's a ReDoS(Regular expression Denial of Service), it only applies to those reading form data, using `python-multipart`. This vulnerability has been patched in version 0.109.1."}]}, {"name": "pydantic", "version": "2.5.0", "vulns": []}, {"name": "uvicorn", "version": "0.24.0", "vulns": []}, {"name": "sqlalchemy", "version": "2.0.23", "vulns": []}, {"name": "psycopg2-binary", "version": "2.9.9", "vulns": []}, {"name": "alembic", "version": "1.12.1", "vulns": []}, {"name": "python-jose", "version": "3.3.0", "vulns": [{"id": "PYSEC-2024-232", "fix_versions": ["3.4.0"], "aliases": ["CVE-2024-33663"], "description": "python-jose through 3.3.0 has algorithm confusion with OpenSSH ECDSA keys and other key formats. This is similar to CVE-2022-29217."}, {"id": "PYSEC-2024-233", "fix_versions": ["3.4.0"], "aliases": ["CVE-2024-33664"], "description": "python-jose through 3.3.0 allows attackers to cause a denial of service (resource consumption) during a decode via a crafted JSON Web Encryption (JWE) token with a high compression ratio, aka a \"JWT bomb.\" This is similar to CVE-2024-21319."}]}, {"name": "passlib", "version": "1.7.4", "vulns": []}, {"name": "python-multipart", "version": "0.0.18", "vulns": []}, {"name": "cryptography", "version": "42.0.5", "vulns": [{"id": "GHSA-h4gh-qq45-vh27", "fix_versions": ["43.0.1"], "aliases": [], "description": "pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 37.0.0-43.0.0 are vulnerable to a security issue. More details about the vulnerability itself can be found in https://openssl-library.org/news/secadv/20240903.txt.  If you are building cryptography source (\"sdist\") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions. "}, {"id": "GHSA-79v4-65xg-pq4g", "fix_versions": ["44.0.1"], "aliases": ["CVE-2024-12797"], "description": "pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 42.0.0-44.0.0 are vulnerable to a security issue. More details about the vulnerability itself can be found in https://openssl-library.org/news/secadv/20250211.txt.  If you are building cryptography source (\"sdist\") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions."}]}, {"name": "pydantic-settings", "version": "2.1.0", "vulns": []}, {"name": "email-validator", "version": "2.3.0", "vulns": []}, {"name": "secure", "version": "0.3.0", "vulns": []}, {"name": "slowapi", "version": "0.1.9", "vulns": []}, {"name": "jinja2", "version": "3.1.6", "vulns": []}, {"name": "structlog", "version": "23.2.0", "vulns": []}, {"name": "pytest", "version": "7.4.3", "vulns": []}, {"name": "pytest-asyncio", "version": "0.21.1", "vulns": []}, {"name": "pytest-cov", "version": "4.1.0", "vulns": []}, {"name": "httpx", "version": "0.25.2", "vulns": []}, {"name": "black", "version": "24.3.0", "vulns": []}, {"name": "isort", "version": "5.12.0", "vulns": []}, {"name": "flake8", "version": "6.1.0", "vulns": []}, {"name": "mypy", "version": "1.7.1", "vulns": []}, {"name": "pydantic-core", "version": "2.14.1", "vulns": []}, {"name": "anyio", "version": "3.7.1", "vulns": []}, {"name": "httpcore", "version": "1.0.9", "vulns": []}, {"name": "mccabe", "version": "0.7.0", "vulns": []}, {"name": "pluggy", "version": "1.6.0", "vulns": []}, {"name": "pycodestyle", "version": "2.11.1", "vulns": []}, {"name": "pyflakes", "version": "3.1.0", "vulns": []}, {"name": "starlette", "version": "0.27.0", "vulns": [{"id": "GHSA-f96h-pmfr-66vw", "fix_versions": ["0.40.0"], "aliases": ["CVE-2024-47874"], "description": "### Summary Starlette treats `multipart/form-data` parts without a `filename` as text form fields and buffers those in byte strings with no size limit. This allows an attacker to upload arbitrary large form fields and cause Starlette to both slow down significantly due to excessive memory allocations and copy operations, and also consume more and more memory until the server starts swapping and grinds to a halt, or the OS terminates the server process with an OOM error. Uploading multiple such requests in parallel may be enough to render a service practically unusable, even if reasonable request size limits are enforced by a reverse proxy in front of Starlette.  ### PoC  ```python from starlette.applications import Starlette from starlette.routing import Route  async def poc(request):     async with request.form():         pass  app = Starlette(routes=[     Route('/', poc, methods=[\"POST\"]), ]) ```  ```sh curl http://localhost:8000 -F 'big=</dev/urandom' ```  ### Impact This Denial of service (DoS) vulnerability affects all applications built with Starlette (or FastAPI) accepting form requests. "}, {"id": "GHSA-2c2j-9gv5-cj73", "fix_versions": ["0.47.2"], "aliases": ["CVE-2025-54121"], "description": "### Summary When parsing a multi-part form with large files (greater than the [default max spool size](https://github.com/encode/starlette/blob/fa5355442753f794965ae1af0f87f9fec1b9a3de/starlette/formparsers.py#L126)) `starlette` will block the main thread to roll the file over to disk. This blocks the event thread which means we can't accept new connections.  ### Details Please see this discussion for details: https://github.com/encode/starlette/discussions/2927#discussioncomment-13721403. In summary the following UploadFile code (copied from [here](https://github.com/encode/starlette/blob/fa5355442753f794965ae1af0f87f9fec1b9a3de/starlette/datastructures.py#L436C5-L447C14)) has a minor bug. Instead of just checking for `self._in_memory` we should also check if the additional bytes will cause a rollover.  ```python      @property     def _in_memory(self) -> bool:         # check for SpooledTemporaryFile._rolled         rolled_to_disk = getattr(self.file, \"_rolled\", True)         return not rolled_to_disk      async def write(self, data: bytes) -> None:         if self.size is not None:             self.size += len(data)          if self._in_memory:             self.file.write(data)         else:             await run_in_threadpool(self.file.write, data) ```  I have already created a PR which fixes the problem: https://github.com/encode/starlette/pull/2962   ### PoC See the discussion [here](https://github.com/encode/starlette/discussions/2927#discussioncomment-13721403) for steps on how to reproduce.  ### Impact To be honest, very low and not many users will be impacted. Parsing large forms is already CPU intensive so the additional IO block doesn't slow down `starlette` that much on systems with modern HDDs/SSDs. If someone is running on tape they might see a greater impact."}]}, {"name": "annotated-types", "version": "0.7.0", "vulns": []}, {"name": "bcrypt", "version": "4.3.0", "vulns": []}, {"name": "cffi", "version": "2.0.0", "vulns": []}, {"name": "click", "version": "8.2.1", "vulns": []}, {"name": "coverage", "version": "7.10.6", "vulns": []}, {"name": "dnspython", "version": "2.8.0", "vulns": []}, {"name": "ecdsa", "version": "0.19.1", "vulns": [{"id": "GHSA-wj6h-64fc-37mp", "fix_versions": [], "aliases": ["CVE-2024-23342"], "description": "python-ecdsa has been found to be subject to a Minerva timing attack on the P-256 curve. Using the `ecdsa.SigningKey.sign_digest()` API function and timing signatures an attacker can leak the internal nonce which may allow for private key discovery. Both ECDSA signatures, key generation, and ECDH operations are affected. ECDSA signature verification is unaffected. The python-ecdsa project considers side channel attacks out of scope for the project and there is no planned fix."}]}, {"name": "greenlet", "version": "3.2.4", "vulns": []}, {"name": "h11", "version": "0.16.0", "vulns": []}, {"name": "httptools", "version": "0.6.4", "vulns": []}, {"name": "idna", "version": "3.10", "vulns": []}, {"name": "limits", "version": "5.5.0", "vulns": []}, {"name": "deprecated", "version": "1.2.18", "vulns": []}, {"name": "wrapt", "version": "1.17.3", "vulns": []}, {"name": "markupsafe", "version": "3.0.2", "vulns": []}, {"name": "mypy-extensions", "version": "1.1.0", "vulns": []}, {"name": "packaging", "version": "25.0", "vulns": []}, {"name": "pathspec", "version": "0.12.1", "vulns": []}, {"name": "platformdirs", "version": "4.4.0", "vulns": []}, {"name": "python-dotenv", "version": "1.1.1", "vulns": []}, {"name": "pyyaml", "version": "6.0.2", "vulns": []}, {"name": "six", "version": "1.17.0", "vulns": []}, {"name": "sniffio", "version": "1.3.1", "vulns": []}, {"name": "typing-extensions", "version": "4.15.0", "vulns": []}, {"name": "uvloop", "version": "0.21.0", "vulns": []}, {"name": "watchfiles", "version": "1.1.0", "vulns": []}, {"name": "websockets", "version": "15.0.1", "vulns": []}, {"name": "certifi", "version": "2025.8.3", "vulns": []}, {"name": "iniconfig", "version": "2.1.0", "vulns": []}, {"name": "mako", "version": "1.3.10", "vulns": []}, {"name": "pyasn1", "version": "0.6.1", "vulns": []}, {"name": "pycparser", "version": "2.23", "vulns": []}, {"name": "rsa", "version": "4.9.1", "vulns": []}], "fixes": []}
